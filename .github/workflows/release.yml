name: Build and Publish Docker Image

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Debug Info
      run: |
        echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
        echo "GITHUB_REF: $GITHUB_REF"

    - name: Download release .tar.gz
      run: |
        RELEASE_TAG=${GITHUB_REF/refs\/tags\//}
        echo "RELEASE_TAG: $RELEASE_TAG"
        RELEASE_URL=$(curl -s https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${RELEASE_TAG} | jq -r '.assets[] | select(.name | endswith("_${{ matrix.arch }}.tar.gz")) | .browser_download_url')
        echo "Release URL: $RELEASE_URL"
        if [ -z "$RELEASE_URL" ]; then
          echo "No release asset found for architecture: ${{ matrix.arch }}"
          exit 1
        fi
        curl -L $RELEASE_URL -o release_${{ matrix.arch }}.tar.gz

    - name: Extract release .tar.gz
      run: tar -xzf release_${{ matrix.arch }}.tar.gz --strip-components=1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: hdbjlizhe
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Extract version number from Git tag
      id: extract_version
      run: echo "RELEASE_VERSION=${GITHUB_REF/refs/tags/}" >> $GITHUB_ENV

    - name: Build Docker image
      run: |
        docker build --platform linux/${{ matrix.arch }} -t hdbjlizhe/autman:${{ env.RELEASE_VERSION }}-${{ matrix.arch }} .
        docker tag hdbjlizhe/autman:${{ env.RELEASE_VERSION }}-${{ matrix.arch }} hdbjlizhe/autman:latest-${{ matrix.arch }}

    - name: Push Docker image
      run: |
        docker push hdbjlizhe/autman:${{ env.RELEASE_VERSION }}-${{ matrix.arch }}
        docker push hdbjlizhe/autman:latest-${{ matrix.arch }}

    - name: Create and push manifest
      if: matrix.arch == 'amd64'
      run: |
        docker manifest create hdbjlizhe/autman:${{ env.RELEASE_VERSION }} \
          hdbjlizhe/autman:${{ env.RELEASE_VERSION }}-amd64 \
          hdbjlizhe/autman:${{ env.RELEASE_VERSION }}-arm64
        docker manifest push hdbjlizhe/autman:${{ env.RELEASE_VERSION }}

        docker manifest create hdbjlizhe/autman:latest \
          hdbjlizhe/autman:latest-amd64 \
          hdbjlizhe/autman:latest-arm64
        docker manifest push hdbjlizhe/autman:latest
